---
---

// BROWSER RESET
@import "reset";
@import "variables";
@import "mixins";
@import "functions";

.home {
    font-family: map-get($fonts, sans);
    font-size: 1rem;
    display: grid;
    grid-template: repeat(3, auto) / repeat(12, 1fr);
    grid-row-gap: 2rem;
    background-color: map-get($shades, light);

    strong {
        font-weight: 700;
    }

    &__header {
        grid-column: 1 / 13;
        grid-row: 1 / 2;
        background-color: map-get($shades, dark);
        color: #FFFFFF;
        display: flex;
        justify-content: space-between;
        flex-direction: column;
        box-shadow: map-get($shadows, 2);
    }

    &__title {
        $dimension: #{rem(80px)};
        font-family: map-get($fonts, serif);
        font-size: 2.5rem;
        font-weight: 700;
        position: relative;
        text-align: center;
        line-height: $dimension;
        margin-top: 1rem;
        z-index: 1;

        &::after {
            @include pseudo;
            width: $dimension;
            height: $dimension;
            background-color: map-get($colors, yellow);
            border-radius: 50%;
            top: 0;
            left: calc(50% - #{$dimension} / 2);
            z-index: -1;
        }
    }

    &__content {
        grid-column: 1 / 13;
        grid-row: 2 / 3;
    }

    &__footer {
        grid-column: 1 / 13;
        grid-row: 3 / 4;
        text-align: center;
    }
}

.nav {

    &__list {
        display: flex;
        justify-content: space-between;
        width: 75vw;
        margin: 1.5rem auto;
    }

    &__link {
        color: #FFFFFF;
        text-decoration: none;
    }
}

.links {

    &__list {
        display: flex;
    }

    &__item {
        width: 20vw;
        height: 20vw;
        text-indent: -9999px;

        @each $color, $hex in $colors {
            $i: index($colors, $color $hex);
            &:nth-child(5n + #{$i}) {
                background-color: $hex;
            }
        }
    }
}

.content {
    border-bottom: 1rem solid map-get($colors, yellow);

    & + .content {
        margin-top: 2rem;
    }

    &__title {
        margin: 0 0 0 1rem;
        font-family: map-get($fonts, serif);
        font-weight: 700;
        font-size: 2rem;
    }

    &__container {
        display: flex;
        flex-direction: column;
        background-color: #FFFFFF;

        .content:nth-child(even) & {
            // flex-direction: row-reverse;
        }
    }

    &__sidebar {
        padding: 1rem;
        display: flex;
        flex-wrap: wrap;
        align-items: center;

        @each $color, $hex in $colors {
            $i: index($colors, $color $hex);

            // Chooses a good color based on current background.
            $pairs: map-get((
                brown: purple,
                pink: yellow,
                purple: brown,
                red: pink,
                yellow: brown
            ), $color);

            .content:nth-child(5n + #{$i}) & {
                background-color: $hex;

                // White text on dark backgrounds.
                @if (lightness($hex) < 50) {
                    color: #FFFFFF;
                }

                & .content__thumb {
                    background-color: map-get($colors, $pairs);
                }
            }
        }
    }

    &__thumb {
        width: 25%;
        border-radius: 50%;
        margin-right: 2rem;
    }

    &__subtitle {
        line-height: 1.25;
        font-family: map-get($fonts, serif);
        font-size: 1.5rem;
        font-weight: 700;
        max-width: 60%;
    }

    &__desc {
        margin-top: 1rem;
        line-height: 1.25;
    }

    &__heading {
        background-color: map-get($colors, yellow);
        color: #FFFFFF;
        font-family: map-get($fonts, serif);
        font-size: 1.5rem;
        line-height: 2;
        padding: 0 1rem;
    }

    &__subcontent {
        padding: .5rem;
        line-height: 1.5;

        li{
            padding: .5rem;

            &:nth-child(odd) {
                background-color: map-get($shades, light);
            }
        }

        .work-history,
        .education {

            li {
                background-color: #FFFFFF;
                padding: 0;
                border-top: .5rem solid map-get($shades, dark);

                & + li {
                    margin-top: 1rem;
                }
            }

            div {
                display: flex;
                justify-content: space-between;
                padding: .5rem;

                &:nth-child(odd) {
                    background-color: map-get($shades, light);
                }
            }

            p {
                background-color: map-get($shades, light);
                padding: .5rem;
            }
        }

        dt {
            font-weight: 700;
        }

        dd {
        }

        .browser {
            $spacing: .25rem;
            background-color: #e2e1e2;
            padding: $spacing;
            border-radius: $spacing;
            margin: 0 0 ($spacing * 4);
            text-align: center;
            position: relative;

            &__dots {
                position: absolute;
                background-color: #ff4443;
                top: ($spacing * 6 / 2 + $spacing);
                left: $spacing * 2;

                &,
                &::before,
                &::after {
                    width: $spacing * 2;
                    height: $spacing * 2;
                    border-radius: 50%;
                }

                &::before,
                &::after {
                    @include pseudo;
                }

                &::before {
                    background-color: #ffbe00;
                    left: $spacing * 4;
                }

                &::after {
                    background-color: #01d545;
                    left: $spacing * 8;
                }
            }

            &__url {
                background-color: #f3f3f3;
                display: inline-block;
                line-height: $spacing * 6;
                height: $spacing * 6;
                padding: $spacing ($spacing * 2);
                margin: 0 0 ($spacing);
                min-width: 60%;
                border-radius: $spacing;
            }

            img {
                width: 100%;
                display: block;
            }
        }
    }
}
